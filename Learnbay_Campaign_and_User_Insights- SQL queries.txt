-- ========================================================
-- DATABASE SETUP AND PREVIEWING TABLES
-- ========================================================

CREATE DATABASE LEARNBAY;

-- View sample data
SELECT * FROM CAMPAIGNS;
SELECT * FROM LEADS;
SELECT * FROM ENROLLMENTS;
SELECT COUNT(*) FROM ENROLLMENTS;
SELECT * FROM ACTIVITY_LOGS;

-- ========================================================
-- ðŸ“Š CAMPAIGN PERFORMANCE KPIS: CTR, CAC, ROI
-- ========================================================

-- 1. CTR (Click-Through Rate)
SELECT 
    CAMPAIGN_ID,
    SOURCE,
    IMPRESSIONS,
    CLICKS,
    ROUND((CLICKS * 1.0 / IMPRESSIONS) * 100, 2) AS CTR
FROM CAMPAIGNS
ORDER BY CTR DESC;

-- 2. Total Enrollments & Revenue Per Campaign
SELECT 
    C.CAMPAIGN_ID,
    C.SOURCE,
    COUNT(DISTINCT E.ENROLLMENT_ID) AS TOTAL_ENROLLMENT,
    SUM(E.PAYMENT_AMOUNT) AS TOTAL_REVENUE
FROM CAMPAIGNS C
JOIN LEADS L ON C.CAMPAIGN_ID = L.CAMPAIGN_ID
JOIN ENROLLMENTS E ON L.LEAD_ID = E.LEAD_ID
GROUP BY C.CAMPAIGN_ID, C.SOURCE
ORDER BY C.CAMPAIGN_ID;

-- 3. CAC (Cost per Acquisition) = SPEND / ENROLLMENTS
SELECT 
    C.CAMPAIGN_ID,
    C.SOURCE,
    ROUND(COUNT(DISTINCT E.ENROLLMENT_ID), 2) AS TOTAL_ENROLLMENT,
    ROUND(C.SPEND, 2) AS TOTAL_SPENDING,
    ROUND(C.SPEND / NULLIF(COUNT(DISTINCT E.ENROLLMENT_ID), 0), 2) AS CAC
FROM CAMPAIGNS C
JOIN LEADS L ON C.CAMPAIGN_ID = L.CAMPAIGN_ID
LEFT JOIN ENROLLMENTS E ON L.LEAD_ID = E.LEAD_ID
GROUP BY C.CAMPAIGN_ID, C.SOURCE, C.SPEND;

-- 4. ROI (Return on Investment) = (Revenue - Spend) / Spend
SELECT 
    C.CAMPAIGN_ID,
    C.SOURCE,
    ROUND(C.SPEND, 2) AS CAMPAIGN_SPENDING,
    SUM(E.PAYMENT_AMOUNT) AS REVENUE,
    ROUND(((SUM(E.PAYMENT_AMOUNT) - C.SPEND) / C.SPEND) * 100, 2) AS ROI_PERCENTAGE
FROM CAMPAIGNS C
JOIN LEADS L ON C.CAMPAIGN_ID = L.CAMPAIGN_ID
JOIN ENROLLMENTS E ON L.LEAD_ID = E.LEAD_ID
GROUP BY C.CAMPAIGN_ID, C.SOURCE, C.SPEND;

-- 5. Full KPI Summary: CTR, CAC, ROI
SELECT 
    C.CAMPAIGN_ID,
    C.SOURCE,
    C.IMPRESSIONS,
    C.CLICKS,
    ROUND((C.CLICKS * 1.0 / C.IMPRESSIONS) * 100, 2) AS CTR_PERCENTAGE,
    C.SPEND,
    COUNT(DISTINCT E.ENROLLMENT_ID) AS TOTAL_ENROLLMENTS,
    SUM(E.PAYMENT_AMOUNT) AS TOTAL_REVENUE,
    ROUND(C.SPEND / NULLIF(COUNT(DISTINCT E.ENROLLMENT_ID), 0), 2) AS CAC,
    ROUND(((SUM(E.PAYMENT_AMOUNT) - C.SPEND) / C.SPEND) * 100, 2) AS ROI_PERCENTAGE
FROM CAMPAIGNS C
LEFT JOIN LEADS L ON C.CAMPAIGN_ID = L.CAMPAIGN_ID
LEFT JOIN ENROLLMENTS E ON L.LEAD_ID = E.LEAD_ID
GROUP BY C.CAMPAIGN_ID, C.SOURCE, C.IMPRESSIONS, C.CLICKS, C.SPEND;

-- ========================================================
-- ðŸ§­ USER FUNNEL CONVERSION ANALYSIS
-- ========================================================

-- 1. Total Leads
SELECT COUNT(DISTINCT LEAD_ID) AS TOTAL_LEADS FROM LEADS;

-- 2. Total Enrollments
SELECT COUNT(DISTINCT LEAD_ID) AS TOTAL_ENROLLED FROM ENROLLMENTS;

-- 3. Active Users
SELECT COUNT(DISTINCT LEAD_ID) AS TOTAL_ACTIVE_USERS FROM ACTIVITY_LOGS;

-- 4. Funnel Summary (Leads â†’ Enrolled â†’ Active)
SELECT
    (SELECT COUNT(DISTINCT LEAD_ID) FROM LEADS) AS TOTAL_LEADS,
    (SELECT COUNT(DISTINCT LEAD_ID) FROM ENROLLMENTS) AS TOTAL_ENROLLED,
    (SELECT COUNT(DISTINCT LEAD_ID) FROM ACTIVITY_LOGS) AS TOTAL_ACTIVE_USERS;

-- ========================================================
-- ðŸ“ˆ COHORT RETENTION ANALYSIS
-- ========================================================

-- 5.1 Identify Cohort Month (based on Lead Date)
SELECT 
    LEAD_ID,
    DATEFROMPARTS(YEAR(LEAD_DATE), MONTH(LEAD_DATE), 1) AS COHORT_MONTH
FROM LEADS;

-- 5.2 Map Leads to Activity Logs (to analyze retention)
SELECT 
    L.LEAD_ID,
    MONTH(L.LEAD_DATE) AS COHORT_MONTH,
    MONTH(A.ACTIVITY_DATE) AS ACTIVITY_MONTH
FROM LEADS L
JOIN ACTIVITY_LOGS A ON L.LEAD_ID = A.LEAD_ID;

-- 5.3 Month Offset Calculation (Activity Lag from Signup)
SELECT
    SUB.LEAD_ID,
    SUB.COHORT_MONTH,
    SUB.ACTIVITY_MONTH,
    DATEDIFF(MONTH, SUB.LEAD_DATE, SUB.ACTIVITY_DATE) AS MONTHS_OFFSET
FROM (
    SELECT 
        L.LEAD_ID,
        DATEFROMPARTS(YEAR(L.LEAD_DATE), MONTH(L.LEAD_DATE), 1) AS LEAD_DATE,
        DATEFROMPARTS(YEAR(A.ACTIVITY_DATE), MONTH(A.ACTIVITY_DATE), 1) AS ACTIVITY_DATE,
        MONTH(L.LEAD_DATE) AS COHORT_MONTH,
        MONTH(A.ACTIVITY_DATE) AS ACTIVITY_MONTH
    FROM LEADS L
    JOIN ACTIVITY_LOGS A ON L.LEAD_ID = A.LEAD_ID
) AS SUB;

-- 5.4 Final Retention Matrix
SELECT
    SUB.COHORT_MONTH,
    SUB.MONTH_OFFSET,
    COUNT(DISTINCT SUB.LEAD_ID) AS RETAINED_USERS
FROM (
    SELECT
        L.LEAD_ID,
        DATEFROMPARTS(YEAR(L.LEAD_DATE), MONTH(L.LEAD_DATE), 1) AS COHORT_MONTH,
        DATEFROMPARTS(YEAR(A.ACTIVITY_DATE), MONTH(A.ACTIVITY_DATE), 1) AS ACTIVITY_MONTH,
        DATEDIFF(MONTH, L.LEAD_DATE, A.ACTIVITY_DATE) AS MONTH_OFFSET
    FROM LEADS L
    JOIN ACTIVITY_LOGS A ON L.LEAD_ID = A.LEAD_ID
) AS SUB
GROUP BY SUB.COHORT_MONTH, SUB.MONTH_OFFSET
ORDER BY SUB.COHORT_MONTH, SUB.MONTH_OFFSET;
